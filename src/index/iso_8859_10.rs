// AUTOGENERATED FROM index-iso-8859-10.txt, ORIGINAL COMMENT FOLLOWS:
//
// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/
//
// For details on index-iso-8859-10.txt see the Encoding Standard
// http://encoding.spec.whatwg.org/

static FORWARD_TABLE: &'static [u16] = &[
    128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
    143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,
    158, 159, 160, 260, 274, 290, 298, 296, 310, 167, 315, 272, 352, 358, 381,
    173, 362, 330, 176, 261, 275, 291, 299, 297, 311, 183, 316, 273, 353, 359,
    382, 8213, 363, 331, 256, 193, 194, 195, 196, 197, 198, 302, 268, 201, 280,
    203, 278, 205, 206, 207, 208, 325, 332, 211, 212, 213, 214, 360, 216, 370,
    218, 219, 220, 221, 222, 223, 257, 225, 226, 227, 228, 229, 230, 303, 269,
    233, 281, 235, 279, 237, 238, 239, 240, 326, 333, 243, 244, 245, 246, 361,
    248, 371, 250, 251, 252, 253, 254, 312,
];

#[inline]
pub fn forward(code: u8) -> u16 {
    FORWARD_TABLE[code as uint]
}

#[inline]
pub fn backward(code: u16) -> u8 {
    match code {
        128 => 0, 129 => 1, 130 => 2, 131 => 3, 132 => 4, 133 => 5, 134 => 6,
        135 => 7, 136 => 8, 137 => 9, 138 => 10, 139 => 11, 140 => 12,
        141 => 13, 142 => 14, 143 => 15, 144 => 16, 145 => 17, 146 => 18,
        147 => 19, 148 => 20, 149 => 21, 150 => 22, 151 => 23, 152 => 24,
        153 => 25, 154 => 26, 155 => 27, 156 => 28, 157 => 29, 158 => 30,
        159 => 31, 160 => 32, 260 => 33, 274 => 34, 290 => 35, 298 => 36,
        296 => 37, 310 => 38, 167 => 39, 315 => 40, 272 => 41, 352 => 42,
        358 => 43, 381 => 44, 173 => 45, 362 => 46, 330 => 47, 176 => 48,
        261 => 49, 275 => 50, 291 => 51, 299 => 52, 297 => 53, 311 => 54,
        183 => 55, 316 => 56, 273 => 57, 353 => 58, 359 => 59, 382 => 60,
        8213 => 61, 363 => 62, 331 => 63, 256 => 64, 193 => 65, 194 => 66,
        195 => 67, 196 => 68, 197 => 69, 198 => 70, 302 => 71, 268 => 72,
        201 => 73, 280 => 74, 203 => 75, 278 => 76, 205 => 77, 206 => 78,
        207 => 79, 208 => 80, 325 => 81, 332 => 82, 211 => 83, 212 => 84,
        213 => 85, 214 => 86, 360 => 87, 216 => 88, 370 => 89, 218 => 90,
        219 => 91, 220 => 92, 221 => 93, 222 => 94, 223 => 95, 257 => 96,
        225 => 97, 226 => 98, 227 => 99, 228 => 100, 229 => 101, 230 => 102,
        303 => 103, 269 => 104, 233 => 105, 281 => 106, 235 => 107, 279 => 108,
        237 => 109, 238 => 110, 239 => 111, 240 => 112, 326 => 113, 333 => 114,
        243 => 115, 244 => 116, 245 => 117, 246 => 118, 361 => 119, 248 => 120,
        371 => 121, 250 => 122, 251 => 123, 252 => 124, 253 => 125, 254 => 126,
        312 => 127, _ => 255
    }
}

#[cfg(test)]
mod tests {
    use super::{forward, backward};

    #[test]
    fn test_correct_table() {
        for i in range(0u8, 128) {
            let j = forward(i);
            if j != 0xffff { assert_eq!(backward(j), i); }
        }
    }
}
